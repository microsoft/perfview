using FastSerialization;
using Microsoft.Diagnostics.Tracing.EventPipe;
using Microsoft.Diagnostics.Tracing.Parsers;
using Microsoft.Diagnostics.Tracing.Parsers.Clr;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection.PortableExecutable;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace Microsoft.Diagnostics.Tracing
{
    /// <summary>
    /// EventPipeEventSource knows how to decode EventPipe (generated by the .NET core runtime).
    /// Please see <see href="https://github.com/Microsoft/perfview/blob/main/src/TraceEvent/EventPipe/EventPipeFormat.md" />for details on the file format.
    ///
    /// By conventions files of such a format are given the .netperf suffix and are logically
    /// very much like a ETL file in that they have a header that indicate things about
    /// the trace as a whole, and a list of events.    Like more modern ETL files the
    /// file as a whole is self-describing.    Some of the events are 'MetaData' events
    /// that indicate the provider name, event name, and payload field names and types.
    /// Ordinary events then point at these meta-data event so that logically all
    /// events have a name some basic information (process, thread, timestamp, activity
    /// ID) and user defined field names and values of various types.
    /// </summary>
    public unsafe class EventPipeEventSource : TraceEventDispatcher
    {
        public EventPipeEventSource(string fileName) : this(new PinnedStreamReader(fileName, SerializationSettings.Default.WithStreamLabelWidth(StreamLabelWidth.FourBytes), 0x20000), fileName, false)
        {
        }

        public EventPipeEventSource(Stream stream)
            : this(new PinnedStreamReader(stream, settings: SerializationSettings.Default.WithStreamLabelWidth(StreamLabelWidth.FourBytes).WithStreamReaderAlignment(StreamReaderAlignment.OneByte)), "stream", true)
        {
        }

        private EventPipeEventSource(PinnedStreamReader streamReader, string name, bool isStreaming)
        {
            _reader = streamReader;
            _fileName = name;
            _isStreaming = isStreaming;
            osVersion = new Version("0.0.0.0");
            cpuSpeedMHz = 10;

            // when streaming we defer parsing the headers until the call to Process()
            if (!isStreaming)
                ParseHeadersAndInitCaches();
        }

        const int MaxSupportedMajorVersion = 6;

        private void ParseHeadersAndInitCaches()
        {
            ParseHeaders();
            InitCaches();
        }

        // Parses the stream headers + TraceBlock and inits the right _parser implementation depending on file format version.
        private void ParseHeaders()
        {
            StreamLabel start = _reader.Current;
            byte[] netTraceMagic = new byte[8];
            _reader.Read(netTraceMagic, 0, netTraceMagic.Length);
            byte[] expectedMagic = Encoding.UTF8.GetBytes("Nettrace");
            bool isNetTrace = true;
            bool isFastSerialization = true;
            if (!netTraceMagic.SequenceEqual(expectedMagic))
            {
                // The older netperf format didn't have this 'Nettrace' magic on it.
                _reader.Goto(start);
                isNetTrace = false;
            }

            if (isNetTrace)
            {
                // After the NetTrace header is either a reserved 4 byte zero field: version >= 6
                // or the FastSerialization header: version <= 5
                StreamLabel afterNetTraceHeader = _reader.Current;
                int reserved = _reader.ReadInt32();
                if (reserved != 0)
                {
                    _reader.Goto(afterNetTraceHeader);
                    // the FastSerializationObjectParser will set FileFormatVersionNumber when it parses the TraceBlock
                }
                else
                {
                    int major = _reader.ReadInt32();
                    if (major < 6)
                    {
                        throw new FormatException($"Invalid NetTrace versioning header");
                    }
                    else if (major > MaxSupportedMajorVersion)
                    {
                        throw new UnsupportedFormatVersionException(major);
                    }
                    // we don't use minor version for anything yet. Minor version bumps are for non-breaking changes so this reader
                    // should be compatible regardless of the minor version.
                    int minor = _reader.ReadInt32();
                    FileFormatVersionNumber = major;
                    isFastSerialization = false;
                }
            }

            if (isFastSerialization)
            {
                _parser = new FastSerializationObjectParser(this, _reader, _fileName, isNetTrace);
            }
            else
            {
                _parser = new V6BlockParser(this, _reader);
            }

            _parser.ParseTraceBlock();
        }

        private void InitCaches()
        {
            _threadCache = new ThreadCache(FileFormatVersionNumber, _processId);
            EventCache = new EventCache(this, _threadCache);
            EventCache.OnEvent += EventCache_OnEvent;
            EventCache.OnEventsDropped += EventCache_OnEventsDropped;
            StackCache = new StackCache();
            LabelListCache = new LabelListCache();
        }

        public DateTime QPCTimeToTimeStamp(long QPCTime)
        {
            return base.QPCTimeToDateTimeUTC(QPCTime).ToLocalTime();
        }

        public Dictionary<string, string> HeaderKeyValuePairs { get; } = new Dictionary<string, string>();

        #region private
        // I put these in the private section because they are overrides, and thus don't ADD to the API.
        public override int EventsLost => _eventsLost;

        /// <summary>
        /// Called after headers are deserialized. This is especially useful in a streaming scenario
        /// because the headers are only read after Process() is called.
        /// </summary>
        internal Action HeadersDeserialized;

        protected override void Dispose(bool disposing)
        {
            if (_parser != null)
            {
                _parser.Dispose();
            }

            base.Dispose(disposing);
        }

        public override bool Process()
        {
            // If we are streaming we defer header parsing until now, otherwise we do it in the constructor
            if (_isStreaming)
            {
                ParseHeadersAndInitCaches();
            }

            HeadersDeserialized?.Invoke();
            _parser.ParseRemainder();
            return true;
        }

        internal int FileFormatVersionNumber { get; set; }
        internal EventCache EventCache { get; private set; }
        internal StackCache StackCache { get; private set; }
        internal LabelListCache LabelListCache { get; private set; }

        internal override string ProcessName(int processID, long timeQPC) => string.Format("Process({0})", processID);


#if SUPPORT_V1_V2
        internal void ReadTraceObjectV1To2(IStreamReader reader)
        {
            // The start time is stored as a SystemTime which is a bunch of shorts, convert to DateTime.
            short year = reader.ReadInt16();
            short month = reader.ReadInt16();
            short dayOfWeek = reader.ReadInt16();
            short day = reader.ReadInt16();
            short hour = reader.ReadInt16();
            short minute = reader.ReadInt16();
            short second = reader.ReadInt16();
            short milliseconds = reader.ReadInt16();
            _syncTimeUTC = new DateTime(year, month, day, hour, minute, second, milliseconds, DateTimeKind.Utc);
            _syncTimeQPC = reader.ReadInt64();
            _QPCFreq = reader.ReadInt64();

            sessionStartTimeQPC = _syncTimeQPC;
            _processId = 0; // V1 && V2 tests expect 0 for process Id
            pointerSize = 8; // V1 EventPipe only supports Linux which is x64 only.
            numberOfProcessors = 1;
        }
#endif

        internal void ReadTraceObjectV3To5(IStreamReader reader)
        {
            // The start time is stored as a SystemTime which is a bunch of shorts, convert to DateTime.
            short year = reader.ReadInt16();
            short month = reader.ReadInt16();
            short dayOfWeek = reader.ReadInt16();
            short day = reader.ReadInt16();
            short hour = reader.ReadInt16();
            short minute = reader.ReadInt16();
            short second = reader.ReadInt16();
            short milliseconds = reader.ReadInt16();
            _syncTimeUTC = new DateTime(year, month, day, hour, minute, second, milliseconds, DateTimeKind.Utc);
            _syncTimeQPC = reader.ReadInt64();
            _QPCFreq = reader.ReadInt64();

            sessionStartTimeQPC = _syncTimeQPC;
            pointerSize = reader.ReadInt32();
            _processId = reader.ReadInt32();
            numberOfProcessors = reader.ReadInt32();
            _expectedCPUSamplingRate = reader.ReadInt32();
        }

        internal void ReadTraceBlockV6OrGreater(SpanReader reader)
        {
            short year = reader.ReadInt16();
            short month = reader.ReadInt16();
            short dayOfWeek = reader.ReadInt16();
            short day = reader.ReadInt16();
            short hour = reader.ReadInt16();
            short minute = reader.ReadInt16();
            short second = reader.ReadInt16();
            short milliseconds = reader.ReadInt16();
            _syncTimeUTC = new DateTime(year, month, day, hour, minute, second, milliseconds, DateTimeKind.Utc);
            _syncTimeQPC = reader.ReadInt64();
            _QPCFreq = reader.ReadInt64();

            sessionStartTimeQPC = _syncTimeQPC;
            pointerSize = reader.ReadInt32();

            int keyValuePairs = reader.ReadInt32();
            for (int i = 0; i < keyValuePairs; i++)
            {
                string key = reader.ReadVarUIntUTF8String();
                string value = reader.ReadVarUIntUTF8String();
                HeaderKeyValuePairs[key] = value;

                // check for well-known key names
                if(key == "HardwareThreadCount" && int.TryParse(value, out int intVal))
                {
                    numberOfProcessors = intVal;
                }
                else if(key == "ProcessId" && int.TryParse(value, out int intVal2))
                {
                    _processId = intVal2;
                }
                else if (key == "ExpectedCPUSamplingRate" && int.TryParse(value, out int intVal3))
                {
                    _expectedCPUSamplingRate = intVal3;
                }
            }
        }

        internal void ReadEventBlockV3OrLess(byte[] blockBytes, long startBlockStreamOffset)
        {
            SpanReader eventBlockReader = new SpanReader(blockBytes, startBlockStreamOffset);
            while (eventBlockReader.RemainingBytes.Length > 0)
            {
                ReadAndProcessEvent(ref eventBlockReader);
            }
        }

        internal void ReadEventBlockV4OrGreater(byte[] blockBytes, long startBlockStreamOffset)
        {
            EventCache.ProcessEventBlock(blockBytes, startBlockStreamOffset);
        }

        internal void ReadMetadataBlockV6OrGreater(byte[] blockBytes, long startBlockStreamOffset)
        {
            SpanReader reader = new SpanReader(blockBytes, startBlockStreamOffset);
            int headerSize = reader.ReadUInt16();
            reader.ReadBytes(headerSize);
            while(reader.RemainingBytes.Length > 0)
            {
                ReadAndCacheMetadataV6OrGreater(ref reader);
            }
        }

        internal void ReadMetadataBlockV5OrLess(byte[] blockBytes, long startBlockStreamOffset)
        {
            SpanReader metadataReader = new SpanReader(blockBytes, startBlockStreamOffset);

            short headerSize = metadataReader.ReadInt16();
            if(headerSize < 20)
            {
                throw new FormatException($"Invalid metadata header size {headerSize}");
            }
            SpanReader headerReader = new SpanReader(metadataReader.ReadBytes(headerSize-2), (long)startBlockStreamOffset + 2);
            short flags = headerReader.ReadInt16();

            EventPipeEventHeader eventHeader = new EventPipeEventHeader();
            while (metadataReader.RemainingBytes.Length > 0)
            {
                ReadEventHeader(ref metadataReader, (flags & (short)EventBlockFlags.HeaderCompression) != 0, ref eventHeader);
                long streamOffset = metadataReader.StreamOffset;
                SpanReader payloadReader = new SpanReader(metadataReader.ReadBytes(eventHeader.PayloadSize), streamOffset);
                ReadAndCacheMetadataV5OrLower(ref payloadReader);
            }
        }

        internal void ReadSequencePointBlockV5OrLess(byte[] blockBytes, long startBlockStreamOffset)
        {
            EventCache.ProcessSequencePointBlockV5OrLess(blockBytes, startBlockStreamOffset);
            StackCache.Flush();
            LabelListCache.Flush();
        }

        internal void ReadSequencePointBlockV6OrGreater(byte[] blockBytes, long startBlockStreamOffset)
        {
            EventCache.ProcessSequencePointBlockV6OrGreater(blockBytes, startBlockStreamOffset);
            StackCache.Flush();
            LabelListCache.Flush();
        }

        internal void ReadStackBlock(byte[] blockBytes, long startBlockStreamOffset)
        {
            StackCache.ProcessStackBlock(blockBytes);
        }

        internal void ReadLabelListBlock(byte[] blockBytes, long startBlockStreamOffset)
        {
            LabelListCache.ProcessLabelListBlock(blockBytes, startBlockStreamOffset);
        }

        enum ThreadInfoKind
        {
            Name = 1,
            OSProcessId = 2,
            OSThreadId = 3,
            KeyValue = 4
        }

        internal void ReadThreadBlock(byte[] blockBytes, long startBlockStreamOffset)
        {
            Debug.Assert(FileFormatVersionNumber >= 6);

            SpanReader reader = new SpanReader(blockBytes, startBlockStreamOffset);
            while(reader.RemainingBytes.Length > 0)
            {
                ushort size = reader.ReadUInt16();
                long streamOffset = reader.StreamOffset;
                SpanReader threadReader = new SpanReader(reader.ReadBytes(size), streamOffset);
                long index = (long)threadReader.ReadVarUInt64();
                EventPipeThread thread = new EventPipeThread(-1, _processId);
                while (threadReader.RemainingBytes.Length > 0)
                {
                    ThreadInfoKind kind = (ThreadInfoKind)threadReader.ReadUInt8();
                    switch (kind)
                    {
                        case ThreadInfoKind.Name:
                            thread.Name = threadReader.ReadVarUIntUTF8String();
                            break;
                        case ThreadInfoKind.OSProcessId:
                            thread.ProcessId = (long)threadReader.ReadVarUInt64();
                            break;
                        case ThreadInfoKind.OSThreadId:
                            thread.ThreadId = (long)threadReader.ReadVarUInt64();
                            break;
                        case ThreadInfoKind.KeyValue:
                            string key = threadReader.ReadVarUIntUTF8String();
                            string value = threadReader.ReadVarUIntUTF8String();
                            thread.Attributes[key] = value;
                            break;
                        default:
                            throw new FormatException($"Unknown thread info kind {kind}");
                    }
                }
                if (_threadCache.ContainsKey(index))
                {
                    throw new FormatException($"Duplicate thread index {index} declared at stream offset 0x{streamOffset:x}");
                }
                _threadCache.AddThread(index, thread);
            }
        }

        internal void ReadRemoveThreadBlock(byte[] blockBytes, long startBlockStreamOffset)
        {
            Debug.Assert(FileFormatVersionNumber >= 6);

            SpanReader reader = new SpanReader(blockBytes, startBlockStreamOffset);
            while (reader.RemainingBytes.Length > 0)
            {
                long streamOffset = reader.StreamOffset;
                long index = (long)reader.ReadVarUInt64();
                int sequenceNumber = (int)reader.ReadVarUInt32();
                EventCache.CheckpointThreadAndPendRemoval(index, sequenceNumber);
            }
        }

#if SUPPORT_V1_V2
        /// <summary>
        /// Parses one event from the stream. If it is a metadata event it is cached for later use.
        /// If it is a regular event it is dispatched to the registered event handlers.
        /// </summary>
        internal void ReadAndProcessEvent(PinnedStreamReader reader)
        {
            Debug.Assert(FileFormatVersionNumber <= 2);
            byte* headerPtr = reader.GetPointer(EventPipeEventHeader.GetHeaderSize(FileFormatVersionNumber));
            int totalSize = EventPipeEventHeader.GetTotalEventSize(headerPtr, FileFormatVersionNumber);
            headerPtr = reader.GetPointer(totalSize); // now we now the real size and get read entire event
            ReadOnlySpan<byte> eventSpan = new ReadOnlySpan<byte>(headerPtr, totalSize);
            SpanReader eventReader = new SpanReader(eventSpan, (long)reader.Current);
            ReadAndProcessEvent(ref eventReader);
            reader.Skip(totalSize);
        }
#endif

        /// <summary>
        /// Parses one event from the stream. If it is a metadata event it is cached for later use.
        /// If it is a regular event it is dispatched to the registered event handlers.
        /// </summary>
        private void ReadAndProcessEvent(ref SpanReader reader)
        {
            Debug.Assert(FileFormatVersionNumber <= 3);
            EventPipeEventHeader header = new EventPipeEventHeader();
            ReadEventHeader(ref reader, false, ref header);
            ReadAndProcessEvent(ref reader, header);
        }

        /// <summary>
        /// Parses one event from the stream. If it is a metadata event it is cached for later use.
        /// If it is a regular event it is dispatched to the registered event handlers.
        /// The event header has already been parsed and the reader should be positioned at the start of the event payload.
        /// </summary>
        private void ReadAndProcessEvent(ref SpanReader reader, EventPipeEventHeader eventHeader)
        {
            Debug.Assert(FileFormatVersionNumber <= 3);
            long offset = reader.StreamOffset;
            SpanReader payloadReader = new SpanReader(reader.ReadBytes(eventHeader.PayloadSize), offset);
            if (eventHeader.IsMetadata())
            {
                ReadAndCacheMetadataV5OrLower(ref payloadReader);
            }
            else
            {
                DispatchEventRecord(ConvertEventHeaderToRecord(ref eventHeader));
            }
            if(eventHeader.PayloadSize < eventHeader.TotalNonHeaderSize)
            {
                // In V3 format and earlier there was a trailing stack trace after the event payload that we need to skip.
                reader.ReadBytes(eventHeader.TotalNonHeaderSize - eventHeader.PayloadSize);
            }
        }

        private void DispatchEventRecord(TraceEventNativeMethods.EVENT_RECORD* eventRecord)
        {
            if (eventRecord != null)
            {
                // in the code below we set sessionEndTimeQPC to be the timestamp of the last event.
                // Thus the new timestamp should be later, and not more than 1 day later.
                Debug.Assert(sessionEndTimeQPC <= eventRecord->EventHeader.TimeStamp);
                Debug.Assert(sessionEndTimeQPC == 0 || eventRecord->EventHeader.TimeStamp - sessionEndTimeQPC < _QPCFreq * 24 * 3600);

                var traceEvent = Lookup(eventRecord);
                if (traceEvent.NeedsFixup)
                {
                    traceEvent.FixupData();
                }
                Dispatch(traceEvent);
                sessionEndTimeQPC = eventRecord->EventHeader.TimeStamp;
            }
        }

        internal void ReadEventHeader(ref SpanReader reader, bool useHeaderCompression, ref EventPipeEventHeader eventData)
        {
            if (FileFormatVersionNumber <= 3)
            {
                EventPipeEventHeader.ReadFromFormatV3(ref reader, ref eventData);
                eventData.ProcessId = _processId;
            }
            else if (FileFormatVersionNumber <= 5)
            {
                EventPipeEventHeader.ReadFromFormatV4(ref reader, useHeaderCompression, ref eventData);
                eventData.ProcessId = _processId;
                if (eventData.MetaDataId != 0 && StackCache.TryGetStack(eventData.StackId, out int stackBytesSize, out IntPtr stackBytes))
                {
                    eventData.StackBytesSize = stackBytesSize;
                    eventData.StackBytes = stackBytes;
                }
            }
            else // if (FileFormatVersionNumber >= 6)
            {
                EventPipeEventHeader.ReadFromFormatV6(ref reader, useHeaderCompression, ref eventData);
                StackCache.TryGetStack(eventData.StackId, out int stackBytesSize, out IntPtr stackBytes);
                eventData.StackBytesSize = stackBytesSize;
                eventData.StackBytes = stackBytes;
                EventPipeThread thread = _threadCache.GetThread(eventData.ThreadIndexOrId);
                eventData.ProcessId = thread.ProcessId;
                eventData.ThreadId = thread.ThreadId;
                LabelList labelList = LabelListCache.GetLabelList(eventData.LabelListId);
                eventData.ActivityID = labelList.ActivityId.HasValue ? labelList.ActivityId.Value : Guid.Empty;
                eventData.RelatedActivityID = labelList.RelatedActivityId.HasValue ? labelList.RelatedActivityId.Value : Guid.Empty;
            }

            // Basic sanity checks.  Are the timestamps and sizes sane.
            Debug.Assert(sessionEndTimeQPC <= eventData.TimeStamp);
            Debug.Assert(sessionEndTimeQPC == 0 || eventData.TimeStamp - sessionEndTimeQPC < _QPCFreq * 24 * 3600);
            Debug.Assert(0 <= eventData.PayloadSize && eventData.PayloadSize <= eventData.TotalNonHeaderSize);
            Debug.Assert(0 <= eventData.TotalNonHeaderSize && eventData.TotalNonHeaderSize < 0x20000);  // TODO really should be 64K but BulkSurvivingObjectRanges needs fixing.
            Debug.Assert(FileFormatVersionNumber != 3 ||
                ((long)eventData.Payload % 4 == 0 && eventData.TotalNonHeaderSize % 4 == 0)); // ensure 4 byte alignment
        }

        /// <summary>
        /// Read the metadata payload and cache it for later use.
        /// </summary>
        /// <param name="reader">The reader should be exactly long enough for one metadata blob</param>
        private void ReadAndCacheMetadataV5OrLower(ref SpanReader reader)
        {
            EventPipeMetadata metadata = EventPipeMetadata.ReadV5OrLower(ref reader, PointerSize, _processId, FileFormatVersionNumber);
            Debug.Assert(reader.RemainingBytes.Length == 0);
            CacheMetadata(metadata);
        }

        /// <summary>
        /// Read the metadata payload and cache it for later use.
        /// </summary>
        private void ReadAndCacheMetadataV6OrGreater(ref SpanReader reader)
        {
            EventPipeMetadata metadata = EventPipeMetadata.ReadV6OrGreater(ref reader, PointerSize);
            CacheMetadata(metadata);
        }

        private void CacheMetadata(EventPipeMetadata metadata)
        {
            DynamicTraceEventData eventTemplate = CreateTemplate(metadata);
            _eventMetadataDictionary.Add(metadata.MetaDataId, metadata);
            _metadataTemplates[eventTemplate] = eventTemplate;
        }

        internal bool TryGetMetadata(int metadataId, out EventPipeMetadata metadata) =>  _eventMetadataDictionary.TryGetValue(metadataId, out metadata);
        internal bool TryGetThread(long threadIndex, out EventPipeThread thread) => _threadCache.TryGetValue(threadIndex, out thread);

        private TraceEventNativeMethods.EVENT_RECORD* ConvertEventHeaderToRecord(ref EventPipeEventHeader eventData)
        {
            if (_eventMetadataDictionary.TryGetValue(eventData.MetaDataId, out var metaData))
            {
                return metaData.GetEventRecordForEventData(eventData);
            }
            else
            {
                Debug.Assert(false, "Warning can't find metaData for ID " + eventData.MetaDataId);
                return null;
            }
        }

        internal override unsafe Guid GetRelatedActivityID(TraceEventNativeMethods.EVENT_RECORD* eventRecord)
        {
            if (FileFormatVersionNumber >= 4)
            {
                if (eventRecord->ExtendedDataCount != 0)
                {
                    var extendedData = eventRecord->ExtendedData;
                    for (int i = 0; i < eventRecord->ExtendedDataCount; i++)
                    {
                        if (extendedData[i].ExtType == TraceEventNativeMethods.EVENT_HEADER_EXT_TYPE_RELATED_ACTIVITYID)
                        {
                            return *((Guid*)extendedData[i].DataPtr);
                        }
                    }
                }

                return Guid.Empty;
            }
            else
            {
                // Recover the EventPipeEventHeader from the payload pointer and then fetch from the header.
                return EventPipeEventHeader.GetRelatedActivityID((byte*)eventRecord->UserData);
            }
        }

        // Expose data on the last parsed event label lists for testing purposes
        // If we want to get non-ActivityId info out through TraceEvent we'll need a proper API for this
        internal LabelList GetLastLabelList()
        {
            return LabelListCache.GetLabelList(_lastLabelListId);
        }

        private void EventCache_OnEvent(ref EventPipeEventHeader header)
        {
            _lastLabelListId = header.LabelListId;
            TraceEventNativeMethods.EVENT_RECORD* eventRecord = ConvertEventHeaderToRecord(ref header);
            ValidateStackFields(header, eventRecord);
            DispatchEventRecord(eventRecord);
        }

        private void EventCache_OnEventsDropped(int droppedEventCount)
        {
            long totalLostEvents = _eventsLost + droppedEventCount;
            _eventsLost = (int)Math.Min(totalLostEvents, int.MaxValue);
        }

        [Conditional("DEBUG")]
        private void ValidateStackFields(EventPipeEventHeader header, TraceEventNativeMethods.EVENT_RECORD* eventRecord)
        {
            bool hasStackExtendedData = false;
            for (int i = 0; i < eventRecord->ExtendedDataCount; i++)
            {
                if (eventRecord->ExtendedData[i].ExtType == TraceEventNativeMethods.EVENT_HEADER_EXT_TYPE_STACK_TRACE32 ||
                    eventRecord->ExtendedData[i].ExtType == TraceEventNativeMethods.EVENT_HEADER_EXT_TYPE_STACK_TRACE64)
                {
                    hasStackExtendedData = true;
                }
            }

            if (header.MetaDataId != 0 &&
                StackCache.TryGetStack(header.StackId, out int stackBytesSize, out IntPtr stackBytes) &&
                stackBytesSize != 0 && stackBytes != IntPtr.Zero) // Sometimes the values in the StackCache are zeros.
            {
                // .NET Core emits stacks for some events that we don't need and so they are excised out before we get here.
                if (_eventMetadataDictionary.TryGetValue(header.MetaDataId, out EventPipeMetadata metadataHeader) &&
                    (metadataHeader.ProviderId == ClrRundownTraceEventParser.ProviderGuid ||
                    (metadataHeader.ProviderId == ClrTraceEventParser.ProviderGuid && (140 <= metadataHeader.EventId && metadataHeader.EventId <= 144 || metadataHeader.EventId == 190))))
                {
                    Debug.Assert(!hasStackExtendedData);
                }
                else
                {
                    Debug.Assert(hasStackExtendedData);
                }
            }
            else
            {
                Debug.Assert(!hasStackExtendedData);
            }
        }
        internal bool TryGetTemplateFromMetadata(TraceEvent unhandledEvent, out DynamicTraceEventData template)
        {
            return _metadataTemplates.TryGetValue(unhandledEvent, out template);
        }

        private DynamicTraceEventData CreateTemplate(EventPipeMetadata metadata)
        {
            DynamicTraceEventData template = new DynamicTraceEventData(null, metadata.EventId, 0, metadata.EventName, Guid.Empty, metadata.Opcode, null, metadata.ProviderId, metadata.ProviderName);
            template.opcode = (TraceEventOpcode)metadata.Opcode;
            template.opcodeName = template.opcode.ToString();
            template.payloadNames = metadata.ParameterNames;
            template.payloadFetches = metadata.ParameterTypes;
            return template;
        }

        private Dictionary<int, EventPipeMetadata> _eventMetadataDictionary = new Dictionary<int, EventPipeMetadata>();
        private IBlockParser _parser;
        private Dictionary<TraceEvent, DynamicTraceEventData> _metadataTemplates =
            new Dictionary<TraceEvent, DynamicTraceEventData>(new ExternalTraceEventParserState.TraceEventComparer());
        private int _eventsLost;
        private int _lastLabelListId;
        internal int _processId;
        internal int _expectedCPUSamplingRate;
        private PinnedStreamReader _reader;
        private string _fileName;
        private bool _isStreaming;
        private ThreadCache _threadCache;
        #endregion
    }


    public class UnsupportedFormatVersionException : FormatException
    {
        public UnsupportedFormatVersionException(int requestedVersion) : base($"NetTrace file format version {requestedVersion} is unsupported.")
        {
            RequestedVersion = requestedVersion;
        }

        public int RequestedVersion { get; }
    }

#region private classes

// This interfaces abstracts the logic that parses either the FastSerialization objects used up to version 5
// or the simplified block format used in version 6 and later.
internal interface IBlockParser : IDisposable
    {
        void ParseTraceBlock();
        void ParseRemainder();
    }

    internal class V6BlockParser : IBlockParser
    {
        PinnedStreamReader _reader;
        EventPipeEventSource _source;

        public V6BlockParser(EventPipeEventSource source, PinnedStreamReader reader)
        {
            _reader = reader;
            _source = source;
        }

        public void ParseTraceBlock()
        {
            BlockHeader header = ReadBlockHeader();
            if (header.Kind != BlockKind.Trace)
            {
                throw new FormatException($"Expected Trace block, but got Kind={header.Kind} at stream offset 0x{_reader.Current.Add(-4):x}");
            }
            StreamLabel startOfBlock = _reader.Current;
            byte[] blockBytes = new byte[header.Length];
            _reader.Read(blockBytes, 0, blockBytes.Length);
            _source.ReadTraceBlockV6OrGreater(new SpanReader(blockBytes,(long)_reader.Current));
        }

        public void ParseRemainder()
        { 
            while(true)
            {
                BlockHeader header = ReadBlockHeader();
                long blockStartOffset = (long)_reader.Current;
                byte[] blockBytes = new byte[header.Length];
                _reader.Read(blockBytes, 0, blockBytes.Length);
                switch (header.Kind)
                {
                    case BlockKind.Event:
                        _source.ReadEventBlockV4OrGreater(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.Metadata:
                        _source.ReadMetadataBlockV6OrGreater(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.SequencePoint:
                        _source.ReadSequencePointBlockV6OrGreater(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.StackBlock:
                        _source.ReadStackBlock(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.Thread:
                        _source.ReadThreadBlock(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.RemoveThread:
                        _source.ReadRemoveThreadBlock(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.LabelList:
                        _source.ReadLabelListBlock(blockBytes, blockStartOffset);
                        break;
                    case BlockKind.EndOfStream:
                        _source.EventCache.Flush();
                        return;
                    default:
                        break; // ignore unknown block types so that the file format can be extended in the future
                }
            }
        }

        public void Dispose()
        {
            _reader?.Dispose();
        }

        private BlockHeader ReadBlockHeader()
        {
            int headerInt = _reader.ReadInt32();
            BlockHeader header = new BlockHeader()
            {
                Kind = (BlockKind)(headerInt >> 24),
                Length = headerInt & 0xFFFFFF
            };
            return header;
        }

        struct BlockHeader
        {
            public BlockKind Kind;
            public int Length;
        }

        enum BlockKind
        {
            EndOfStream = 0,
            Trace = 1,
            Event = 2,
            Metadata = 3,
            SequencePoint = 4,
            StackBlock = 5,
            Thread = 6,
            RemoveThread = 7,
            LabelList = 8
        }
    }

    internal class FastSerializationObjectParser : IBlockParser, IFastSerializable, IFastSerializableVersion
    {

        EventPipeEventSource _source;
        Deserializer _deserializer;
        bool _isNetTrace;
#if SUPPORT_V1_V2
        StreamLabel _endOfEventStream;
#endif

        public FastSerializationObjectParser(EventPipeEventSource source, PinnedStreamReader streamReader, string fileName, bool isNetTrace)
        {
            _source = source;
            _deserializer = new Deserializer(streamReader, fileName);
            _isNetTrace = isNetTrace;
#if SUPPORT_V1_V2
            // This is only here for V2 and V1.  V3+ should use the name EventTrace, it can be removed when we drop support.
            _deserializer.RegisterFactory("Microsoft.DotNet.Runtime.EventPipeFile", delegate { return this; });
#endif
            _deserializer.RegisterFactory("Trace", delegate { return this; });
            _deserializer.RegisterFactory("EventBlock", delegate { return new EventPipeEventBlock(_source); });
            _deserializer.RegisterFactory("MetadataBlock", delegate { return new EventPipeMetadataBlock(_source); });
            _deserializer.RegisterFactory("SPBlock", delegate { return new EventPipeSequencePointBlock(_source); });
            _deserializer.RegisterFactory("StackBlock", delegate { return new EventPipeStackBlock(_source); });
        }


        public void ParseTraceBlock()
        {
            var entryObj = _deserializer.GetEntryObject(); // this call invokes FromStream and reads header data
            if ((_source.FileFormatVersionNumber >= 4) != _isNetTrace)
            {
                //NetTrace header should be present iff the version is >= 4
                throw new SerializationException("Invalid NetTrace file format version");
            }
            // Because we told the deserialize to use 'this' when creating a EventPipeFile, we
            // expect the entry object to be 'this'.
            Debug.Assert(entryObj == this);
        }

        unsafe public void ParseRemainder()
        {
            if (_source.FileFormatVersionNumber >= 3)
            {
                // loop through the stream until we hit a null object.  Deserialization of
                // EventPipeEventBlocks will cause dispatch to happen.
                // ReadObject uses registered factories and recognizes types by names, then derserializes them with FromStream
                while (_deserializer.ReadObject() != null)
                { }

                if (_source.FileFormatVersionNumber >= 4)
                {
                    // Ensure all events have been sorted and dispatched
                    _source.EventCache.Flush();
                }
            }
#if SUPPORT_V1_V2
            else
            {
                PinnedStreamReader deserializerReader = (PinnedStreamReader)_deserializer.Reader;
                while (deserializerReader.Current < _endOfEventStream)
                {
                    _source.ReadAndProcessEvent(deserializerReader);
                }
            }
#endif
        }

        public void ToStream(Serializer serializer) => throw new InvalidOperationException("We dont ever serialize one of these in managed code so we don't need to implement ToSTream");

        public void FromStream(Deserializer deserializer)
        {
            _source.FileFormatVersionNumber = deserializer.VersionBeingRead;

#if SUPPORT_V1_V2
            if (deserializer.VersionBeingRead < 3)
            {
                ForwardReference reference = deserializer.ReadForwardReference();
                _endOfEventStream = deserializer.ResolveForwardReference(reference, preserveCurrent: true);
                _source.ReadTraceObjectV1To2(deserializer.Reader);
            }
#endif
            else
            {
                _source.ReadTraceObjectV3To5(deserializer.Reader);
            }
        }

        public void Dispose()
        {
            _deserializer?.Dispose();
        }

        /// <summary>
        /// This is the version number reader and writer (although we don't don't have a writer at the moment)
        /// It MUST be updated (as well as MinimumReaderVersion), if breaking changes have been made.
        /// If your changes are forward compatible (old readers can still read the new format) you
        /// don't have to update the version number but it is useful to do so (while keeping MinimumReaderVersion unchanged)
        /// so that readers can quickly determine what new content is available.
        /// </summary>
        public int Version => 5;

        /// <summary>
        /// This field is only used for writers, and this code does not have writers so it is not used.
        /// It should be set to Version unless changes since the last version are forward compatible
        /// (old readers can still read this format), in which case this should be unchanged.
        /// </summary>
        public int MinimumReaderVersion => Version;

        /// <summary>
        /// This is the smallest version that the deserializer here can read.   Currently
        /// we are careful about backward compat so our deserializer can read anything that
        /// has ever been produced.   We may change this when we believe old writers basically
        /// no longer exist (and we can remove that support code).
        /// </summary>
        public int MinimumVersionCanRead => 0;

        /// <summary>
        /// The Nettrace format is divided up into various blocks - this is a base class that handles the common
        /// aspects for all of them.
        /// </summary>
        internal abstract class EventPipeBlock : IFastSerializable, IFastSerializableVersion
        {
            public EventPipeBlock(EventPipeEventSource source) => _source = source;

            protected abstract void ReadBlockContents(byte[] blockBytes, long blockStartStreamOffset);

            public unsafe void FromStream(Deserializer deserializer)
            {
                // blockSizeInBytes does not include padding bytes to ensure alignment.
                var blockSizeInBytes = deserializer.ReadInt();

                // after the block size comes eventual padding, we just need to skip it by jumping to the nearest aligned address
                if ((long)deserializer.Current % 4 != 0)
                {
                    var nearestAlignedAddress = deserializer.Current.Add((int)(4 - ((long)deserializer.Current % 4)));
                    deserializer.Goto(nearestAlignedAddress);
                }

                _startEventData = deserializer.Current;
                _endEventData = _startEventData.Add(blockSizeInBytes);

                PinnedStreamReader deserializerReader = (PinnedStreamReader)deserializer.Reader;
                int blockLength = (int)_endEventData.Sub(_startEventData);
                byte[] blockBytes = new byte[blockLength];
                deserializerReader.Read(blockBytes, 0, blockBytes.Length);
                ReadBlockContents(blockBytes, (long)_startEventData);
            }

            public void ToStream(Serializer serializer) => throw new InvalidOperationException();

            protected StreamLabel _startEventData;
            protected StreamLabel _endEventData;
            protected EventPipeEventSource _source;

            public int Version => 2;

            public int MinimumVersionCanRead => Version;

            public int MinimumReaderVersion => 0;
        }

        /// <summary>
        /// An EventPipeEventBlock represents a block of events. In V3 and earlier, this block contains
        /// a mixture of real events and metadata carrying events. In V4 onwards it contains only real events
        /// and metadata was moved to a separate block.
        /// </summary>
        internal class EventPipeEventBlock : EventPipeBlock
        {
            public EventPipeEventBlock(EventPipeEventSource source) : base(source) { }

            protected override void ReadBlockContents(byte[] blockBytes, long blockStartStreamOffset)
            {
                if (_source.FileFormatVersionNumber >= 4)
                {
                    _source.ReadEventBlockV4OrGreater(blockBytes, blockStartStreamOffset);
                }
                else
                {
                    _source.ReadEventBlockV3OrLess(blockBytes, blockStartStreamOffset);
                }
            }
        }

        /// <summary>
        /// A block of metadata carrying events. These 'events' aren't dispatched by EventPipeEventSource - they carry
        /// the metadata that allows the payloads of non-metadata events to be decoded.
        /// </summary>
        internal class EventPipeMetadataBlock : EventPipeBlock
        {
            public EventPipeMetadataBlock(EventPipeEventSource source) : base(source) { }

            protected override void ReadBlockContents(byte[] blockBytes, long blockStartStreamOffset)
            {
                _source.ReadMetadataBlockV5OrLess(blockBytes, blockStartStreamOffset);
            }
        }

        /// <summary>
        /// An EventPipeSequencePointBlock represents a stream divider that contains
        /// updates for all thread event sequence numbers, indicates that all queued
        /// events can be sorted and dispatched, and that all cached events/stacks can
        /// be flushed.
        /// </summary>
        internal class EventPipeSequencePointBlock : EventPipeBlock
        {
            public EventPipeSequencePointBlock(EventPipeEventSource source) : base(source) { }

            protected override void ReadBlockContents(byte[] blockBytes, long blockStartStreamOffset)
            {
                _source.ReadSequencePointBlockV5OrLess(blockBytes, blockStartStreamOffset);
            }
        }

        /// <summary>
        /// An EventPipeStackBlock represents a block of interned stacks. Events refer
        /// to stacks by an id.
        /// </summary>
        internal class EventPipeStackBlock : EventPipeBlock
        {
            public EventPipeStackBlock(EventPipeEventSource source) : base(source) { }

            protected override void ReadBlockContents(byte[] blockBytes, long blockStartStreamOffset)
            {
                _source.ReadStackBlock(blockBytes, blockStartStreamOffset);
            }
        }
    }

    internal enum EventBlockFlags : short
    {
        Uncompressed = 0,
        HeaderCompression = 1
    }

    /// <summary>
    /// Private utility class.
    ///
    /// At the start of every event from an EventPipe is a header that contains
    /// common fields like its size, threadID timestamp etc.  EventPipeEventHeader
    /// is the layout of this.  Events have two variable sized parts: the user
    /// defined fields, and the stack.   EventPipEventHeader knows how to
    /// decode these pieces (but provides no semantics for it.
    ///
    /// It is not a public type, but used in low level parsing of EventPipeEventSource.
    /// </summary>

    internal unsafe struct EventPipeEventHeader
    {
        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        struct LayoutV3
        {
            public int EventSize;          // Size bytes of this header and the payload and stacks if any.  does NOT encode the size of the EventSize field itself.
            public int MetaDataId;          // a number identifying the description of this event.
            public int ThreadId;
            public long TimeStamp;
            public Guid ActivityID;
            public Guid RelatedActivityID;
            public int PayloadSize;         // size in bytes of the user defined payload data.
        }

        public static void ReadFromFormatV3(ref SpanReader reader, ref EventPipeEventHeader header)
        {
            ref readonly LayoutV3 layout = ref reader.ReadRef<LayoutV3>();
            header.EventSize = layout.EventSize;
            header.MetaDataId = layout.MetaDataId;
            header.ThreadIndexOrId = header.ThreadId = layout.ThreadId;
            header.CaptureThreadIndexOrId = -1;
            header.CaptureProcNumber = -1;
            header.TimeStamp = layout.TimeStamp;
            header.ActivityID = layout.ActivityID;
            header.RelatedActivityID = layout.RelatedActivityID;
            header.PayloadSize = layout.PayloadSize;

            // these pointer conversions only work because the reader is backed by pinned memory
            header.Payload = (IntPtr)Unsafe.AsPointer<byte>(ref MemoryMarshal.GetReference(reader.RemainingBytes));

            // we want to peak ahead and read some data in the stack part of the event without advancing the reader's cursor
            SpanReader eventReader = reader;
            eventReader.ReadBytes(layout.PayloadSize);
            header.StackBytesSize = eventReader.ReadInt32();
            header.StackBytes = (IntPtr)Unsafe.AsPointer<byte>(ref MemoryMarshal.GetReference(eventReader.RemainingBytes));
            header.HeaderSize = sizeof(LayoutV3);
            int totalSize = header.EventSize + 4;
            header.TotalNonHeaderSize = totalSize - header.HeaderSize;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        struct LayoutV4
        {
            public int EventSize;           // Size bytes of this header and the payload. Does NOT encode the size of the EventSize field itself.
            public int MetaDataId;          // a number identifying the description of this event.
            public int SequenceNumber;
            public long ThreadId;
            public long CaptureThreadId;
            public int CaptureProcNumber;
            public int StackId;
            public long TimeStamp;
            public Guid ActivityID;
            public Guid RelatedActivityID;
            public int PayloadSize;         // size in bytes of the user defined payload data.
        }

        enum CompressedHeaderFlags
        {
            MetadataId = 1 << 0,
            CaptureThreadAndSequence = 1 << 1,
            ThreadId = 1 << 2,
            StackId = 1 << 3,
            LabelListId = 1 << 4,
            ActivityId = 1 << 4,
            RelatedActivityId = 1 << 5,
            Sorted = 1 << 6,
            DataLength = 1 << 7
        }

        public static void ReadFromFormatV4(ref SpanReader reader, bool useHeaderCompresion, ref EventPipeEventHeader header)
        {
            if (!useHeaderCompresion)
            {
                ref readonly LayoutV4 layout = ref reader.ReadRef<LayoutV4>();
                header.EventSize = layout.EventSize;
                header.MetaDataId = layout.MetaDataId & 0x7FFF_FFFF;
                header.IsSorted = ((uint)layout.MetaDataId & 0x8000_0000) == 0;
                header.SequenceNumber = layout.SequenceNumber;
                header.ThreadIndexOrId = header.ThreadId = layout.ThreadId;
                header.CaptureThreadIndexOrId = layout.CaptureThreadId;
                header.CaptureProcNumber = layout.CaptureProcNumber;
                header.StackId = layout.StackId;
                header.TimeStamp = layout.TimeStamp;
                header.ActivityID = layout.ActivityID;
                header.RelatedActivityID = layout.RelatedActivityID;
                header.PayloadSize = layout.PayloadSize;
                // these pointer conversions only work because the reader is backed by pinned memory
                header.Payload = (IntPtr)Unsafe.AsPointer<byte>(ref MemoryMarshal.GetReference(reader.RemainingBytes));
                header.HeaderSize = sizeof(LayoutV4);
                header.TotalNonHeaderSize = header.PayloadSize;
            }
            else
            {
                long startOffset = reader.StreamOffset;
                byte flags = reader.ReadUInt8();
                if((flags & (byte)CompressedHeaderFlags.MetadataId) != 0)
                {
                    header.MetaDataId = (int)reader.ReadVarUInt32();
                }
                if ((flags & (byte)CompressedHeaderFlags.CaptureThreadAndSequence) != 0)
                {
                    header.SequenceNumber += (int)reader.ReadVarUInt32() + 1;
                    header.CaptureThreadIndexOrId = (long)reader.ReadVarUInt64();
                    header.CaptureProcNumber = (int)reader.ReadVarUInt32();
                }
                else
                {
                    if(header.MetaDataId != 0)
                    {
                        header.SequenceNumber++;
                    }
                }
                if ((flags & (byte)CompressedHeaderFlags.ThreadId) != 0)
                {
                    header.ThreadIndexOrId = header.ThreadId = (long)reader.ReadVarUInt64(); ;
                }
                if ((flags & (byte)CompressedHeaderFlags.StackId) != 0)
                {
                    header.StackId = (int)reader.ReadVarUInt32();
                }
                ulong timestampDelta = reader.ReadVarUInt64(); ;
                header.TimeStamp += (long)timestampDelta;
                if ((flags & (byte)CompressedHeaderFlags.ActivityId) != 0)
                {
                    header.ActivityID = reader.Read<Guid>();
                }
                if ((flags & (byte)CompressedHeaderFlags.RelatedActivityId) != 0)
                {
                    header.RelatedActivityID = reader.Read<Guid>();
                }
                header.IsSorted = (flags & (byte)CompressedHeaderFlags.Sorted) != 0;
                if ((flags & (byte)CompressedHeaderFlags.DataLength) != 0)
                {
                    header.PayloadSize = (int)reader.ReadVarUInt32();
                }
                header.HeaderSize = (int)(reader.StreamOffset - startOffset);

                // this only works because the span is backed by pinned memory
                header.Payload = (IntPtr)Unsafe.AsPointer<byte>(ref MemoryMarshal.GetReference(reader.RemainingBytes));
                header.TotalNonHeaderSize = header.PayloadSize;
            }

            // These fields aren't read from the file itself, but must be reset on each read
            // to ensure that events that don't have a stack are handled properly.
            header.StackBytesSize = 0;
            header.StackBytes = IntPtr.Zero;
        }

        [StructLayout(LayoutKind.Sequential, Pack = 1)]
        struct LayoutV6
        {
            public int EventSize;           // Size bytes of this header and the payload. Does NOT encode the size of the EventSize field itself.
            public int MetaDataId;          // a number identifying the description of this event.
            public int SequenceNumber;
            public long ThreadIndex;
            public long CaptureThreadIndex;
            public int CaptureProcNumber;
            public int StackId;
            public long TimeStamp;
            public int LabelListId;
            public int PayloadSize;         // size in bytes of the user defined payload data.
        }

        public static void ReadFromFormatV6(ref SpanReader reader, bool useHeaderCompresion, ref EventPipeEventHeader header)
        {
            if (!useHeaderCompresion)
            {
                ref readonly LayoutV6 layout = ref reader.ReadRef<LayoutV6>();
                header.EventSize = layout.EventSize;
                header.MetaDataId = layout.MetaDataId & 0x7FFF_FFFF;
                header.IsSorted = ((uint)layout.MetaDataId & 0x8000_0000) == 0;
                header.SequenceNumber = layout.SequenceNumber;
                header.ThreadIndexOrId = layout.ThreadIndex;
                header.CaptureThreadIndexOrId = layout.CaptureThreadIndex;
                header.CaptureProcNumber = layout.CaptureProcNumber;
                header.StackId = layout.StackId;
                header.TimeStamp = layout.TimeStamp;
                header.LabelListId = layout.LabelListId;
                header.PayloadSize = layout.PayloadSize;
                // these pointer conversions only work because the reader is backed by pinned memory
                header.Payload = (IntPtr)Unsafe.AsPointer<byte>(ref MemoryMarshal.GetReference(reader.RemainingBytes));
                header.HeaderSize = sizeof(LayoutV4);
                header.TotalNonHeaderSize = header.PayloadSize;
            }
            else
            {
                long startOffset = reader.StreamOffset;
                byte flags = reader.ReadUInt8();
                if ((flags & (byte)CompressedHeaderFlags.MetadataId) != 0)
                {
                    header.MetaDataId = (int)reader.ReadVarUInt32();
                }
                if ((flags & (byte)CompressedHeaderFlags.CaptureThreadAndSequence) != 0)
                {
                    header.SequenceNumber += (int)reader.ReadVarUInt32() + 1;
                    header.CaptureThreadIndexOrId = (long)reader.ReadVarUInt64();
                    header.CaptureProcNumber = (int)reader.ReadVarUInt32();
                }
                else
                {
                    if (header.MetaDataId != 0)
                    {
                        header.SequenceNumber++;
                    }
                }
                if ((flags & (byte)CompressedHeaderFlags.ThreadId) != 0)
                {
                    header.ThreadIndexOrId = (long)reader.ReadVarUInt64(); ;
                }
                if ((flags & (byte)CompressedHeaderFlags.StackId) != 0)
                {
                    header.StackId = (int)reader.ReadVarUInt32();
                }
                ulong timestampDelta = reader.ReadVarUInt64(); ;
                header.TimeStamp += (long)timestampDelta;
                if ((flags & (byte)CompressedHeaderFlags.LabelListId) != 0)
                {
                    header.LabelListId = (int)reader.ReadVarUInt32();
                }
                header.IsSorted = (flags & (byte)CompressedHeaderFlags.Sorted) != 0;
                if ((flags & (byte)CompressedHeaderFlags.DataLength) != 0)
                {
                    header.PayloadSize = (int)reader.ReadVarUInt32();
                }
                header.HeaderSize = (int)(reader.StreamOffset - startOffset);

                // this only works because the span is backed by pinned memory
                header.Payload = (IntPtr)Unsafe.AsPointer<byte>(ref MemoryMarshal.GetReference(reader.RemainingBytes));
                header.TotalNonHeaderSize = header.PayloadSize;
            }
        }

        private int EventSize;          // Size bytes of this header and the payload and stacks if any. Does NOT encode the size of the EventSize field itself.
        public int MetaDataId;          // a number identifying the description of this event.
        public int SequenceNumber;
        public long CaptureThreadIndexOrId; // On format V6+ this is a thread index, otherwise it is an OS ID
        public int CaptureProcNumber;
        public long ThreadIndexOrId;    // On format V6+ this is a thread index, otherwise it is an OS ID
        public long ThreadId;
        public long ProcessId;
        public long TimeStamp;
        public int LabelListId;
        public Guid ActivityID;
        public Guid RelatedActivityID;
        public bool IsSorted;
        public int PayloadSize;         // size in bytes of the user defined payload data.
        public IntPtr Payload;
        public int StackId;
        public int StackBytesSize;
        public IntPtr StackBytes;
        public int HeaderSize;         // The size of the event up to the payload
        public int TotalNonHeaderSize; // The size of the payload, stack, and alignment padding


        public bool IsMetadata() => MetaDataId == 0; // 0 means that it's a metadata Id


#if SUPPORT_V1_V2
        /// <summary>
        /// Size of the event header + stack + payload (includes EventSize field itself)
        /// </summary>
        public static int GetTotalEventSize(byte* headerPtr, int formatVersion)
        {
            Debug.Assert(formatVersion <= 2);
            LayoutV3* header = (LayoutV3*)headerPtr;
            return header->EventSize + sizeof(int);
        }

        /// <summary>
        /// Header Size is defined to be the number of bytes before the Payload bytes.
        /// </summary>
        public static int GetHeaderSize(int formatVersion)
        {
            Debug.Assert(formatVersion <= 2);
            return sizeof(LayoutV3);
        }
#endif

        public static Guid GetRelatedActivityID(byte* headerPtr)
        {
            LayoutV3* header = (LayoutV3*)headerPtr;
            return header->RelatedActivityID;
        }
    }
    #endregion
}
